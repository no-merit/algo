import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

class Room {
	char type;
	int cost;
	List<Integer> next_room = new ArrayList<>();

	Room(char type, int cost) {
		this.type = type;
		this.cost = cost;
	}
}

public class Main {
	static boolean ans;
	static List<Room> room_list;
	static boolean[] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		while (true) {
			int room = Integer.parseInt(br.readLine());
			if (room == 0)
				break;
			room_list = new ArrayList<>();
			room_list.add(new Room('0',0));
			for (int i = 0; i < room; i++) {
				String[] info = br.readLine().split(" ");
				Room now = new Room(info[0].charAt(0), Integer.parseInt(info[1]));
				for (int j = 2; j < info.length - 1; j++) {
					now.next_room.add(Integer.parseInt(info[j]));
				}
				room_list.add(now);
			}
			ans = false;
			visited = new boolean[room + 1];
			if (room_list.get(0).type != 'T') {
				dfs(1, 0, room);
			}
			if (ans) {
				sb.append("Yes").append("\n");
			} else {
				sb.append("No").append("\n");
			}
		}
		System.out.println(sb.toString());
	}

	private static void dfs(int num, int coin, int destination) {
		if (num == destination) {
			ans = true;
			return;
		}

		Room now = room_list.get(num);

		for (int next : now.next_room) {
			if (!visited[next]) {
				Room r = room_list.get(next);
				if (r.type == 'E') {
					visited[next]=true;
					dfs(next,coin,destination);
				} else if (r.type == 'L') {
					if(coin<r.cost) {
						visited[next]=true;
						dfs(next,r.cost,destination);
					}else {
						visited[next]=true;
						dfs(next,coin,destination);
					}
				} else {
					if(coin>=r.cost) {
						visited[next]=true;
						dfs(next,coin-r.cost,destination);
					}
				}
			}
		}
	}

}
